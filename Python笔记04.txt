面向对象：（08、09的练习没做）
48、使用class关键字定义类。  __init__是一个特殊方法（作用同c++中的构造函数）用于在创建对象时进行初始化操作。
49、访问可见性问题： 在Python中，属性和方法的访问权限只有两种，也就是公开的和私有的，  如果希望属性是私有的，在给属性命名时可以用两个下划线作为开头。
	但是，Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问，事实上如果你知道更换名字的规则仍然可以访问到它们，
50、"We are all consenting adults here"。  绝大多数程序员都认为开放比封闭要好，而且程序员要自己为自己的行为负责。
51、在实际开发中，我们并不建议将属性设置为私有的，因为这会导致子类无法访问。
	但是直接将属性暴露给外界又是很危险的。故可以使用get和set方法来进行限制。
	有没有更简单的方法呢？对于python来说是有的，那就是使用@property和@score.setter装饰器。
	把一个getter方法变成属性，只需要加上@property就可以了，此时，@property本身又创建了另一个装饰器。
	@score.setter，负责把一个setter方法变成属性赋值，于是，我们就拥有一个可控的属性操作。
52、面向对象有三大支柱：封装、继承和多态。
	封装：我理解是"隐藏一切可以隐藏的实现细节，只向外界暴提供简单的编程接口"。 用户在使用这个对象时，只需要知道方法的参数即可去调用它，而不用知道具体的实现细节。
	继承：让一个类从另一个类那里将属性和方法直接继承下来，从而减少重复代码的编写。提供继承信息的我们称之为父类，也叫超类或基类；得到继承信息的我们称之为子类，也叫派生类或衍生类。
		子类除了继承父类提供的属性和方法，还可以定义自己特有的属性和方法，所以子类比父类拥有的更多的能力。
	多态：子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。
		通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为
53、__slots__魔法
	Python是一门动态语言。通常，动态语言允许我们在程序运行时给对象绑定新的属性或方法，当然也可以对已经绑定的属性和方法进行解绑定。
	但是如果我们需要限定自定义类型的对象只能绑定某些属性，可以通过在类中定义__slots__变量来进行限定。需要注意的是__slots__的限定只对当前类的对象生效，对子类并不起任何作用。
	class Person(object):         # 限定Person对象只能绑定_name, _age和_gender属性
		__slots__ = ('_name', '_age', '_gender')
54、静态方法和类方法
	静态方法：属于类，不专属与某个对象的方法。eg：在三角形类中，判断输入的三条边是否可以组成三角形，就应该写成静态方法。代码如下
		@staticmethod
		def is_valid(a, b, c):
			 return a + b > c and b + c > a and a + c > b
	类方法：和静态方法比较类似。类方法的第一个参数约定名为cls，它代表的是当前类相关的信息的对象（类本身也是一个对象，有的地方也称之为类的元数据对象），
		通过这个参数我们可以获取和类相关的信息并且可以创建出类的对象，Python 的类方法采用装饰器@classmethod来定义。例子如下：（class  Clock）
		@classmethod
		def now(cls):
			*******
		clock = Clock.now() # 调用